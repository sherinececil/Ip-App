{"version":3,"sources":["MyCard.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","minWidth","width","textAlign","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","MyCard","details","classes","React","useState","expanded","setExpanded","countryDetails","setcountryDetails","isCardLoading","setisCardLoading","position","location","lat","lng","useEffect","fetch","country","then","res","json","data","console","log","markerIcon","L","Icon","iconUrl","iconSize","ip","style","display","justifyContent","Width","Card","className","CardHeader","avatar","Avatar","src","flag","title","city","region","subheader","Date","toLocaleString","CardContent","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","icon","Popup","Typography","variant","color","CardActions","disableSpacing","IconButton","clsx","onClick","Collapse","in","timeout","unmountOnExit","paragraph","capital","App","setDetails","isLoading","setIsLoading","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0840335.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\r\n// import { DateTime } from \"luxon\";\r\nimport L from \"leaflet\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    minWidth: \"275\",\r\n    width: \"960\",\r\n    textAlign: \"center\"\r\n  },\r\n  \r\n  media: {\r\n    height: 0,\r\n    paddingTop: \"56.25%\" // 16:9\r\n  },\r\n  expand: {\r\n    transform: \"rotate(0deg)\",\r\n    marginLeft: \"auto\",\r\n    transition: theme.transitions.create(\"transform\", {\r\n      duration: theme.transitions.duration.shortest\r\n    })\r\n  },\r\n  expandOpen: {\r\n    transform: \"rotate(180deg)\"\r\n  }\r\n}));\r\n\r\nexport default function MyCard({ details }) {\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = React.useState(false);\r\n  const [countryDetails, setcountryDetails] = useState();\r\n  const [isCardLoading, setisCardLoading] = useState(true);\r\n  const position = [details.location.lat, details.location.lng];\r\n\r\n  \r\n  useEffect(() => {\r\n    fetch(`https://restcountries.eu/rest/v2/alpha/${details.location.country}`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setcountryDetails(data);\r\n        setisCardLoading(false);\r\n      });\r\n  }, []);\r\n  console.log(countryDetails);\r\n\r\n  const markerIcon = new L.Icon({\r\n    iconUrl:\r\n      \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-icon-2x.png\",\r\n    iconSize: [22, 41]\r\n  });\r\n\r\n  // var local = DateTime.local();\r\n  // var rezoned = local.setZone(\"Europe/Paris\");\r\n\r\n  const handleExpandClick = () => {\r\n    setExpanded(!expanded);\r\n  };\r\n  return isCardLoading ? (\r\n    <h2>{details.ip}</h2>\r\n  ) : (\r\n    <div\r\n      style={{ display: \"flex\", justifyContent: \"center\", Width: \"960px\" }}\r\n    >\r\n      <Card className={classes.root} width=\"960px\">\r\n        <CardHeader\r\n          avatar={\r\n            <Avatar\r\n              aria-label=\"recipe\"\r\n              className={classes.avatar}\r\n              src={countryDetails.flag}\r\n            >\r\n              {details.location.country}\r\n            </Avatar>\r\n          }\r\n          title={details.location.city + \", \" + details.location.region}\r\n          subheader={new Date().toLocaleString() + \"\"}\r\n        />\r\n\r\n        <CardContent>\r\n          {/*  */}\r\n          \r\n           <MapContainer center={position} zoom={13} scrollWheelZoom={false}>\r\n            <TileLayer\r\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            <Marker icon={markerIcon} position={position}>\r\n              <Popup>\r\n                A pretty CSS3 popup. <br /> Easily customizable.\r\n              </Popup>\r\n            </Marker>\r\n          </MapContainer>\r\n          \r\n          \r\n          <Typography variant=\"body2\" color=\"textSecondary\" >\r\n            <h2>Your IP:{details.ip}</h2>\r\n          </Typography>\r\n        </CardContent>\r\n        <CardActions disableSpacing>\r\n          <IconButton\r\n            className={clsx(classes.expand, {\r\n              [classes.expandOpen]: expanded\r\n            })}\r\n            onClick={handleExpandClick}\r\n            aria-expanded={expanded}\r\n            aria-label=\"show more\"\r\n          >\r\n            <ExpandMoreIcon />\r\n          </IconButton>\r\n        </CardActions>\r\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n          <CardContent>\r\n            <Typography paragraph>Some Interesting Facts!</Typography>\r\n            <Typography paragraph>Capital City: {countryDetails.capital}</Typography>\r\n\r\n          </CardContent>\r\n        </Collapse>\r\n      </Card>\r\n     </div>\r\n  );\r\n}\r\n","\nimport './App.css';\nimport { useState, useEffect } from \"react\";\nimport MyCard from \"./MyCard\";\nimport ReactDOM from \"react-dom\";\n\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [details, setDetails] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    fetch(\n      `https://geo.ipify.org/api/v1?apiKey=at_z0pCzs3DoY29z5TNZGFZp9Wkv4AMj&ipAddress`\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        setDetails(data);\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n         {/* <button onClick={getDetails}>GET IP</button> */}\n      {isLoading ? <h2>{details.ip}</h2> : <MyCard details={details} />}\n   \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}